import hudson.security.SecurityRealm
import org.jenkinsci.plugins.GithubSecurityRealm
import org.jenkinsci.plugins.GithubAuthorizationStrategy
import hudson.security.AuthorizationStrategy
import jenkins.model.*

String githubWebUri = '<%= p('jenkins.github.oauth.url.web') %>'
String githubApiUri = '<%= p('jenkins.github.oauth.url.api') %>'
String clientID = '<%= p('jenkins.github.oauth.client.id') %>'
String clientSecret = '<%= p('jenkins.github.oauth.client.secret') %>'
String oauthScopes = 'read:org'

SecurityRealm github_realm = new GithubSecurityRealm(githubWebUri, githubApiUri, clientID, clientSecret, oauthScopes)
//check for equality, no need to modify the runtime if no settings changed
if(!github_realm.equals(Jenkins.instance.getSecurityRealm())) {
    Jenkins.instance.setSecurityRealm(github_realm)
    Jenkins.instance.save()
}

String adminUserNames = '<%= p('jenkins.github.oauth.admins') %>'
String organizationNames = '<%= p('jenkins.github.oauth.org_name') %>'
boolean useRepositoryPermissions = '<%= p('jenkins.github.oauth.repository.perms') %>'
boolean authenticatedUserReadPermission = '<%= p('jenkins.github.oauth.auth.read') %>'
boolean authenticatedUserCreateJobPermission = '<%= p('jenkins.github.oauth.auth.create') %>'
boolean allowGithubWebHookPermission = '<%= p('jenkins.github.oauth.webhook.perms') %>'
boolean allowCcTrayPermission = '<%= p('jenkins.github.oauth.tray.perms') %>'
boolean allowAnonymousReadPermission = '<%= p('jenkins.github.oauth.anon.read') %>'
boolean allowAnonymousJobStatusPermission = '<%= p('jenkins.github.oauth.anon.job.status') %>'

AuthorizationStrategy github_authorization = new GithubAuthorizationStrategy(adminUserNames,
    authenticatedUserReadPermission,
    useRepositoryPermissions,
    authenticatedUserCreateJobPermission,
    organizationNames,
    allowGithubWebHookPermission,
    allowCcTrayPermission,
    allowAnonymousReadPermission,
    allowAnonymousJobStatusPermission)

//check for equality, no need to modify the runtime if no settings changed
if(!github_authorization.equals(Jenkins.instance.getAuthorizationStrategy())) {
    Jenkins.instance.setAuthorizationStrategy(github_authorization)
    Jenkins.instance.save()
}
