#!/bin/bash

if [ "<%= p('toggle.jenkins.drain') %>" = "false" ]; then echo 0; exit 0; fi

#!/bin/bash

set -eo pipefail
JENKINS_URL=http://<%= spec.ip %>:<%= p('jenkins.server.port') %>
JENKINS_USE_GITHUB_AUTH="<%= p('jenkins.use_github_auth') %>"
USERNAME=<%= p('jenkins.github.integration_user') %>
TOKEN=<%= p('jenkins.github.integration_user.access_token') %>

if [ ${JENKINS_USE_GITHUB_AUTH} == "false" ]; then
  USERNAME=administrator
  TOKEN=<%= p('jenkins.admin.password') %>
fi

SLEEP_INTERVAL_IN_SECONDS=5
TIMEOUT_IN_SECONDS=600
CRUMB_PATH='/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)'
BUILDS_PATH="/api/xml?&tree=jobs[builds[*]]&xpath=/hudson/job/build[building=%22true%22]&wrapper=builds"

exec 3>&1
exec 1>> /var/vcap/sys/log/jenkins-master/drain.stdout.log
exec 2>> /var/vcap/sys/log/jenkins-master/drain.stderr.log

output_for_bosh() {
  local _exit_code=$?

  if [ ${_exit_code} -eq 0 ]; then
    echo "$(date -Ins): drain succeeded"
  else
    echo "$(date -Ins): drain failed"
  fi
  # if failed will wait an arbitrary number of extra seconds (non zero _exit_code value)
  # as per https://bosh.io/docs/drain/
  echo ${_exit_code} >&3
}

poll_builds() {
  local _builds=$(check_builds)

  while [ "${_builds}" != "<builds/>" ]; do
    echo "$(date -Ins): Waiting on builds: ${_builds}"
    echo "$(date -Ins): ${TIMEOUT_IN_SECONDS} seconds remaining"
    sleep ${SLEEP_INTERVAL_IN_SECONDS}
    set +e
    let TIMEOUT_IN_SECONDS=TIMEOUT_IN_SECONDS-SLEEP_INTERVAL_IN_SECONDS
    set -e
    if [ ${TIMEOUT_IN_SECONDS} -eq 0 ]; then
      echo "$(date -Ins): Timed out waiting for builds to complete"
      exit 1
    fi
    _builds=$(check_builds)
  done
}

check_builds() {
  ${CURL_PREFIX}${BUILDS_PATH}
}

trap output_for_bosh EXIT

# Check whether the process is running.
pid_path=/var/vcap/sys/run/jenkins-master/jenkins-master.pid

if [ ! -f "${pid_path}" ]; then echo 0; exit 0; fi

pid=$(<"$pid_path")

echo "$(date -Ins): Checking ${pid} with BOSH_JOB_STATE: ${BOSH_JOB_STATE} and BOSH_JOB_NEXT_STATE: ${BOSH_JOB_NEXT_STATE}"

if ! ps -p "${pid}" >/dev/null; then echo 0; exit 0; fi

# Process is running, so send signal to instruct the process to gracefully shutdown Jenkins.
echo "$(date -Ins): Draining ${pid} with BOSH_JOB_STATE: ${BOSH_JOB_STATE} and BOSH_JOB_NEXT_STATE: ${BOSH_JOB_NEXT_STATE}"

CRUMB=$(curl --silent --user ${USERNAME}:${TOKEN} ${JENKINS_URL}${CRUMB_PATH})
CURL_PREFIX="curl --globoff --silent --user ${USERNAME}:${TOKEN} --header ${CRUMB} ${JENKINS_URL}"

${CURL_PREFIX}/quietDown --request POST

poll_builds

exit 0
