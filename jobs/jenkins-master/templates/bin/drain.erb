#!/bin/bash

if [ "<%= p('toggle.jenkins.drain') %>" = "false" ]; then echo 0; exit 0; fi

set -eo pipefail

exec 3>&1
exec 1>> /var/vcap/sys/log/jenkins-master/drain.stdout.log
exec 2>> /var/vcap/sys/log/jenkins-master/drain.stderr.log

echo "$(date -Ins): Checking ${pid} with BOSH_JOB_STATE: ${BOSH_JOB_STATE} and BOSH_JOB_NEXT_STATE: ${BOSH_JOB_NEXT_STATE}"

output_for_bosh() {
  exit_code=$?

  if [ ${exit_code} -eq 0 ]; then
    echo "$(date -Ins): drain succeeded"
  else
    echo "$(date -Ins): drain failed"
  fi

  # Inform BOSH that it can continue after waiting 60 seconds.
  echo 60 >&3
}

trap output_for_bosh EXIT

# Check whether the process is running.
pid_path=/var/vcap/sys/run/jenkins-master/jenkins-master.pid

if [ ! -f "${pid_path}" ]; then echo 0; exit 0; fi

pid=$(<"$pid_path")

if ! ps -p "${pid}" >/dev/null; then echo 0; exit 0; fi

# TODO Process is running, so send signal to instruct the process to drain active connections and to steer traffic to the other instances of this job.
echo "$(date -Ins): Draining ${pid} with BOSH_JOB_STATE: ${BOSH_JOB_STATE} and BOSH_JOB_NEXT_STATE: ${BOSH_JOB_NEXT_STATE}"

exit 0
